type Query {
  node(id: String!): Node!
  clientVersion: String!
  user(id: String!): User!
  me: User!
  guestbooks: [Guestbook!]!
  guestbook(id: String!): Guestbook!
  pageVisits(route: String!): PageVisit!
  microgameByGameId(gameId: String!): Microgame!
  microgamesByContributor(authorPrefix: String!): Microgame!
  contributorByAuthorPrefix(prefix: String!): Contributor!
  LaroldsByAuthor(prefix: String!): [Larold!]!
  Larolds: [Larold!]!
  leaderBoardEntry(id: String!): LeaderBoardEntry!
  leaderBoardEntriesTop: [LeaderBoardEntry!]!
  microgameStatsByGameId(gameId: String!): MicrogameStats!
  microgameStats: MicrogameStats!
}

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  displayName: String!
  profilePictureUrl: String!
  roles: [DiscordRole!]!
}

type DiscordRole {
  id: ID!
  displayName: String!
  colorHex: String!
}

type Guestbook implements Node {
  id: ID!
  authorUserId: String!
  text: String!
  createdAt: Float!
  author: User!
}

type PageVisit implements Node {
  id: ID!
  route: String!
  visits: Float!
}

type Microgame implements Node {
  id: ID!
  gameId: String!
  contributors: Contributor!
  ratings: [MicrogameRating!]!
  stats: MicrogameStats!
  hasMyRating: Boolean!
  communityRating: MicrogameCommunityRating!
}

type Contributor implements Node {
  id: ID!
  prefix: String!
  displayName: String!
}

type MicrogameRating implements Node {
  id: ID!
  isFavorited: Boolean!
  difficulty: Float!
  comment: String!
  createdAt: Float!
  editedAt: Float!
  author: User!
}

type MicrogameStats implements Node {
  id: ID!
  wins: Float!
  losses: Float!
  totalPlays: Float!
  lastPlayedTimestamp: Float!
  winLossRatio: Float!
  winRatio: Float!
  lossRatio: Float!
  difficultySlices: [DifficultySlice!]!
}

type DifficultySlice {
  difficulty: Float!
  totalPlays: Float!
  wins: Float!
  losses: Float!
  winRatio: Float!
  lossRatio: Float!
  winLossRatio: Float!
}

type MicrogameCommunityRating {
  difficulty: Float!
  favorited: Float!
  total: Float!
}

type Larold implements Node {
  id: ID!
  attribution: String!
  imageUrl: String!
  name: String!
  author: Contributor
}

type LeaderBoardEntry implements Node {
  id: ID!
  name: String!
  score: Float!
  sprite: String!
  frame: Float!
  last_microgame_key: String!
  last_microgame_name: String!
  timestamp: Float!
}

type Mutation {
  guestbookCreate(input: GuestbookCreateInput!): Guestbook!
  addMicrogameRating(input: AddMicrogameRatingInput!): MicrogameRating!
}

input GuestbookCreateInput {
  text: String!
}

input AddMicrogameRatingInput {
  microgameId: String!
  comment: String!
  difficulty: Float!
  isFavorited: Boolean!
}
